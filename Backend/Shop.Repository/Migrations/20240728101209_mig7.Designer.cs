// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Shop.Repository;

#nullable disable

namespace Shop.Repository.Migrations
{
    [DbContext(typeof(ShopDbContext))]
    [Migration("20240728101209_mig7")]
    partial class mig7
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Shop.Entity.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Shop.Entity.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Shop.Entity.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 7, 28, 13, 12, 9, 34, DateTimeKind.Local).AddTicks(7842),
                            IsDeleted = false,
                            Name = "Electronics",
                            Path = "electronics"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 7, 28, 13, 12, 9, 34, DateTimeKind.Local).AddTicks(7852),
                            IsDeleted = false,
                            Name = "Books",
                            Path = "books"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 7, 28, 13, 12, 9, 34, DateTimeKind.Local).AddTicks(7853),
                            IsDeleted = false,
                            Name = "Clothing",
                            Path = "clothing"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 7, 28, 13, 12, 9, 34, DateTimeKind.Local).AddTicks(7854),
                            IsDeleted = false,
                            Name = "Home & Kitchen",
                            Path = "home-kitchen"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 7, 28, 13, 12, 9, 34, DateTimeKind.Local).AddTicks(7855),
                            IsDeleted = false,
                            Name = "Toys",
                            Path = "toys"
                        });
                });

            modelBuilder.Entity("Shop.Entity.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 7, 28, 13, 12, 9, 34, DateTimeKind.Local).AddTicks(7976),
                            Description = "Latest smartphone",
                            IsDeleted = false,
                            Price = 699m,
                            Quantity = 10,
                            Title = "Smartphone"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2024, 7, 28, 13, 12, 9, 34, DateTimeKind.Local).AddTicks(7979),
                            Description = "High performance laptop",
                            IsDeleted = false,
                            Price = 999m,
                            Quantity = 10,
                            Title = "Laptop"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 7, 28, 13, 12, 9, 34, DateTimeKind.Local).AddTicks(7980),
                            Description = "Interesting fiction book",
                            IsDeleted = false,
                            Price = 19m,
                            Quantity = 10,
                            Title = "Fiction Book"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2024, 7, 28, 13, 12, 9, 34, DateTimeKind.Local).AddTicks(7981),
                            Description = "Informative science book",
                            IsDeleted = false,
                            Price = 29m,
                            Quantity = 10,
                            Title = "Science Book"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 7, 28, 13, 12, 9, 34, DateTimeKind.Local).AddTicks(7983),
                            Description = "Comfortable cotton t-shirt",
                            IsDeleted = false,
                            Price = 15m,
                            Quantity = 10,
                            Title = "T-Shirt"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2024, 7, 28, 13, 12, 9, 34, DateTimeKind.Local).AddTicks(7984),
                            Description = "Stylish jeans",
                            IsDeleted = false,
                            Price = 40m,
                            Quantity = 10,
                            Title = "Jeans"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 7, 28, 13, 12, 9, 34, DateTimeKind.Local).AddTicks(7985),
                            Description = "Powerful blender",
                            IsDeleted = false,
                            Price = 55m,
                            Quantity = 30,
                            Title = "Blender"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2024, 7, 28, 13, 12, 9, 34, DateTimeKind.Local).AddTicks(7986),
                            Description = "Non-stick cookware set",
                            IsDeleted = false,
                            Price = 75m,
                            Quantity = 10,
                            Title = "Cookware Set"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 7, 28, 13, 12, 9, 34, DateTimeKind.Local).AddTicks(7988),
                            Description = "Cool action figure",
                            IsDeleted = false,
                            Price = 25m,
                            Quantity = 10,
                            Title = "Action Figure"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2024, 7, 28, 13, 12, 9, 34, DateTimeKind.Local).AddTicks(7989),
                            Description = "Fun board game",
                            IsDeleted = false,
                            Price = 30m,
                            Quantity = 20,
                            Title = "Board Game"
                        });
                });

            modelBuilder.Entity("Shop.Entity.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Shop.Entity.Entities.Cart", b =>
                {
                    b.HasOne("Shop.Entity.Entities.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Shop.Entity.Entities.CartItem", b =>
                {
                    b.HasOne("Shop.Entity.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Shop.Entity.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Shop.Entity.Entities.Product", b =>
                {
                    b.HasOne("Shop.Entity.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Shop.Entity.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("Shop.Entity.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Shop.Entity.Entities.User", b =>
                {
                    b.Navigation("Carts");
                });
#pragma warning restore 612, 618
        }
    }
}
